{
  "timestamp": "2025-07-16_09-37-12",
  "active_window": "Cursor",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "/Desktop/AI-Buddy/activity_analyzer.py\n\ud83d\udd0d User Activity Monitor Started\nUsing Google Gemini LLM for activity analysis\nAnalyzing data from gatheruserdata.py JSON files\nPress Ctrl+C to stop\n\nTraceback (most recent call last):\n  File \"/Users/jayantkapoor/Desktop/AI-Buddy/activity_analyzer.py\", line 328, in <module>\n    main() \n    ^^^^^^\n  File \"/Users/jayantkapoor/Desktop/AI-Buddy/activity_analyzer.py\", line 241, in main\n    gather_proc = subprocess.Popen([\n                  ^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/subprocess.py\", line 1026, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/subprocess.py\", line 1955, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: 'python'",
  "vscode_text": "import json\nimport time\n\nimport os\n\nfrom typing import Dict, Any, List\nimport subprocess\nimport signal\n\n# Import Google Gemini\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.schema import SystemMessage, HumanMessage\n\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Google Gemini API key setup\nos.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\")\n\n\n\n# Initialize Google Gemini LLM\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.5-flash\",\n    temperature=0.3,\n    convert_system_message_to_human=True\n)\n\n\ndef read_latest_user_data() -> Dict[str, Any]:\n    \"\"\"Read the latest user data from live_output.json\"\"\"\n    try:\n        with open(\"output/live_output.json\", \"r\", encoding=\"utf-8\") as f:\n            return json.load(f)\n    except FileNotFoundError:\n        return {}\n    except json.JSONDecodeError:\n        return {}\n\n\ndef read_user_data_file(filename: str) -> Dict[str, Any]:\n    \"\"\"Read a specific user data file\"\"\"\n    try:\n        with open(f\"output/{filename}\", \"r\", encoding=\"utf-8\") as f:\n            return json.load(f)\n    except FileNotFoundError:\n        return {}\n    except json.JSONDecodeError:\n        return {}\n\n\ndef get_all_user_data_files() -> List[str]:\n    \"\"\"Get list of all user data files in output directory\"\"\"\n    try:\n        files = [f for f in os.listdir(\"output\") if f.startswith(\"user_data_\") and f.endswith(\".json\")]\n        return sorted(files)\n    except FileNotFoundError:\n        return []\n\n\ndef analyze_user_activity_from_json(user_data: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"\n    Analyze user data from JSON to determine what the user is doing\n    Returns JSON format with activity classification\n    \"\"\"\n    if not user_data:\n        return {\n            \"activity\": \"unknown\",\n            \"confidence\": 0.0,\n            \"description\": \"No user data available\",\n            \"timestamp\": time.time()\n        }\n\n    # Extract relevant information from user data\n    active_window = user_data.get(\"active_window\", \"\")\n    focused_text = user_data.get(\"focused_text\", \"\")\n    clipboard_content = user_data.get(\"clipboard\", \"\")\n    # vscode_text = user_data.get(\"vscode_text\", \"\")\n    ocr_text = user_data.get(\"ocr_text\", \"\")\n    timestamp = user_data.get(\"timestamp\", \"\")\n\n    # Combine all text sources for analysis\n    #     combined_text = f\"\"\"\n    # Active Window: {active_window}\n    # Focused Text: {focused_text}\n    # Clipboard: {clipboard_content}\n    # VS Code Text: {vscode_text}\n    # Screen OCR: {ocr_text}\n    #     \"\"\".strip()\n    combined_text = f\"\"\"\nActive Window: {active_window}\nFocused Text: {focused_text}\nClipboard: {clipboard_content}\nScreen OCR: {ocr_text}\n    \"\"\".strip()\n\n    if not combined_text or combined_text.strip() == \"\":\n        return {\n            \"activity\": \"unknown\",\n            \"confidence\": 0.0,\n            \"description\": \"No meaningful text data available\",\n            \"timestamp\": time.time()\n        }\n\n    system_prompt = \"\"\"You are an AI assistant that analyzes user activity data to determine what the user is currently doing. \n\n    You have access to multiple data sources:\n    - Active Window: The currently active application\n    - Focused Text: Text from the focused element\n    - Clipboard: Content in the clipboard\n    - VS Code Text: Text from VS Code editor (if available)\n    - Screen OCR: Text extracted from screen capture\n\n    Analyze this data and classify the user's activity into one of these categories:\n    - coding: Writing, editing, or reviewing code (Python, JavaScript, etc.)\n    - researching: Reading articles, papers, documentation, or searching for information\n    - browsing: General web browsing, social media, or casual internet use\n    - emailing: Composing, reading, or managing emails\n    - messaging: Using chat applications, messaging apps, or communication tools\n    - gaming: Playing video games or game-related activities\n    - watching: Watching videos, streams, or multimedia content\n    - writing: Writing documents, notes, or creative content\n    - designing: Working on design, graphics, or creative projects\n    - working: General work activities not covered by other categories\n    - unknown: Unable to determine the activity\n\n    Consider the following patterns:\n    - Coding: Look for code syntax, function definitions, imports, IDE elements\n    - Messaging: Look for chat interfaces, message bubbles, contact names\n    - Researching: Look for articles, documentation, search results\n    - Browsing: Look for web browser elements, URLs, navigation\n\n    Return your response in valid JSON format with these fields:\n    - activity: The classified activity (string)\n    - confidence: Confidence level 0.0-1.0 (float)\n    - description: Brief description of what you observed (string)\n    - details: Additional context or specific tools/applications detected (string)\n    - data_sources: Which data sources were most useful for classification (string)\n    - timestamp: Current timestamp (float)\n\n    Example response:\n    {\n        \"activity\": \"coding\",\n        \"confidence\": 0.85,\n        \"description\": \"User appears to be writing Python code in Cursor IDE\",\n        \"details\": \"Detected Python imports, function definitions, and Cursor IDE interface\",\n        \"data_sources\": \"VS Code text and active window\",\n        \"timestamp\": 1234567890.123\n    }\n\n    Only return valid JSON, no additional text.\"\"\"\n\n    human_prompt = f\"Here's the user activity data to analyze:\\n\\n{combined_text}\\n\\nPlease analyze this data and determine what the user is doing.\"\n\n    try:\n        time.sleep(10)  # Add 10-second delay before LLM call\n        messages = [\n            SystemMessage(content=system_prompt),\n            HumanMessage(content=human_prompt)\n        ]\n\n        response = llm(messages)\n        response_text = response.content.strip()\n\n        # Try to parse the JSON response\n        try:\n            # Handle markdown-wrapped JSON responses\n            if response_text.startswith(\"```json\") and response_text.endswith(\"```\"):\n                # Extract JSON from markdown code blocks\n                json_start = response_text.find(\"```json\") + 7\n                json_end = response_text.rfind(\"```\")\n                if json_start < json_end:\n                    response_text = response_text[json_start:json_end].strip()\n            elif response_text.startswith(\"```\") and response_text.endswith(\"```\"):\n                # Extract JSON from generic code blocks\n                json_start = response_text.find(\"```\") + 3\n                json_end = response_text.rfind(\"```\")\n                if json_start < json_end:\n                    response_text = response_text[json_start:json_end].strip()\n\n            result = json.loads(response_text)\n            # Ensure timestamp is current\n            result[\"timestamp\"] = time.time()\n            return result\n        except json.JSONDecodeError:\n            # Fallback if JSON parsing fails\n            return {\n                \"activity\": \"unknown\",\n                \"confidence\": 0.0,\n                \"description\": \"Failed to parse LLM response\",\n                \"details\": response_text,\n                \"data_sources\": \"LLM response parsing failed\",\n                \"timestamp\": time.time()\n            }\n\n    except Exception as e:\n        return {\n            \"activity\": \"unknown\",\n            \"confidence\": 0.0,\n            \"description\": f\"Error analyzing user data: {str(e)}\",\n            \"details\": \"\",\n            \"data_sources\": \"Error occurred during analysis\",\n            \"timestamp\": time.time()\n        }\n\n\ndef analyze_historical_data(num_files: int = 5) -> List[Dict[str, Any]]:\n    \"\"\"Analyze the most recent user data files\"\"\"\n    files = get_all_user_data_files()\n    if not files:\n        return []\n\n    # Get the most recent files\n    recent_files = files[-num_files:] if len(files) > num_files else files\n    results = []\n\n    for filename in recent_files:\n        user_data = read_user_data_file(filename)\n        if user_data:\n            analysis = analyze_user_activity_from_json(user_data)\n            analysis[\"source_file\"] = filename\n            results.append(analysis)\n\n    return results\n\n\ndef analyze_latest_activity() -> dict:\n    user_data = read_latest_user_data()\n    return analyze_user_activity_from_json(user_data)\n\n\ndef main():\n    \"\"\"Main function to continuously monitor and analyze user activity\"\"\"\n    print(\"\ud83d\udd0d User Activity Monitor Started\")\n    print(\"Using Google Gemini LLM for activity analysis\")\n    print(\"Analyzing data from gatheruserdata.py JSON files\")\n    print(\"Press Ctrl+C to stop\\n\")\n\n    # Start gatheruserdata.py as a subprocess\n    gather_proc = subprocess.Popen([\n        sys.executable, \"gatheruserdata.py\"\n    ])\n    print(\"\ud83d\ude80 Started gatheruserdata.py in the background (PID: {}), collecting user data...\".format(gather_proc.pid))\n\n    try:\n        last_timestamp = None\n        while True:\n            print(\"\ud83d\udcca Reading latest user data...\")\n            user_data = read_latest_user_data()\n\n            # Only analyze if new data is available\n            if user_data and user_data.get(\"timestamp\") != last_timestamp:\n                last_timestamp = user_data.get(\"timestamp\")\n                print(\"\ud83e\udd16 Analyzing user activity from JSON data...\")\n                result = analyze_user_activity_from_json(user_data)\n                # Pretty print the JSON result\n                print(\"\ud83d\udcca Activity Analysis:\")\n                print(json.dumps(result, indent=2))\n                try:\n                    with open(\"output/prediction_output.json\", \"w\", encoding=\"utf-8\") as f:\n                        json.dump(result, f, indent=2)\n                except Exception as e:\n                    print(f\"\u274c Failed to save prediction output: {e}\")\n                print(\"=\" * 60)\n            else:\n                print(\"\u23f3 Waiting for new user data...\")\n\n            # Wait before next check\n            time.sleep(10)\n\n    except KeyboardInterrupt:\n        print(\"\\n\ud83d\udc4b Activity monitor stopped by user\")\n    except Exception as e:\n        print(f\"\u274c Error: {e}\")\n    finally:\n        print(\"\ud83d\uded1 Terminating gatheruserdata.py subprocess...\")\n        gather_proc.terminate()\n        try:\n            gather_proc.wait(timeout=5)\n        except subprocess.TimeoutExpired:\n            gather_proc.kill()\n        print(\"\u2705 gatheruserdata.py stopped.\")\n\n\ndef analyze_single_file(filename: str):\n    \"\"\"Analyze a specific user data file\"\"\"\n    print(f\"\ud83d\udd0d Analyzing file: {filename}\")\n    user_data = read_user_data_file(filename)\n\n    if user_data:\n        result = analyze_user_activity_from_json(user_data)\n        print(\"\ud83d\udcca Activity Analysis:\")\n        print(json.dumps(result, indent=2))\n    else:\n        print(f\"\u274c Could not read file: {filename}\")\n\n\ndef analyze_recent_files(num_files: int = 5):\n    \"\"\"Analyze the most recent user data files\"\"\"\n    print(f\"\ud83d\udd0d Analyzing {num_files} most recent files...\")\n    results = analyze_historical_data(num_files)\n\n    for result in results:\n        print(f\"\\n\ud83d\udcc1 File: {result.get('source_file', 'Unknown')}\")\n        print(f\"\ud83c\udfaf Activity: {result.get('activity', 'Unknown')}\")\n        print(f\"\ud83d\udcc8 Confidence: {result.get('confidence', 0.0):.2f}\")\n        print(f\"\ud83d\udcdd Description: {result.get('description', 'No description')}\")\n        print(\"-\" * 40)\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    if len(sys.argv) > 1:\n        if sys.argv[1] == \"--file\" and len(sys.argv) > 2:\n            analyze_single_file(sys.argv[2])\n        elif sys.argv[1] == \"--recent\" and len(sys.argv) > 2:\n            analyze_recent_files(int(sys.argv[2]))\n        elif sys.argv[1] == \"--recent\":\n            analyze_recent_files()\n        else:\n            print(\"Usage:\")\n            print(\"  python activity_analyzer.py                    # Monitor live data\")\n            print(\"  python activity_analyzer.py --file <filename>  # Analyze specific file\")\n            print(\"  python activity_analyzer.py --recent [num]     # Analyze recent files\")\n    else:\n        main()",
  "ocr_text": ">\n>\n\nOo PF \u00bb\n\n___pycache__\n\n.venv\n\nv buddies\n\n> __pycache__\n\n@ chatbot_buddy.py\n\n@ focus_automation.py\n\u00ae personal_assistant....\n\n>\n>\n>\nbo]\n\n.\n\n\u00abevdeao\n\nCO Co\n\noutput\n\ntext\n\nvenv\n\nenv\nactivity_analyzer.py\nblock_sites.sh\nfocus_control_ui.py\ngatheruserdata.py\npa_buddy_ui.py 3\nPROJECT_INDEX.md\nrequirements.txt\nrun_chatbot.py\ntest_focus_automaii...\n\n\u20ac > |\n\nP&P Al-Buddy\n\nonoas\n\ney 2 @ pa_buddyuipy3 X\n\n@ pa_buddy_ui.py > ...\n\nDy oo Create venv and install dependencies + OQ X\n\nre oS\n\nT import sys\nfrom PyQt5,QtWidgets import (\n\nQApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout, QLineEdit,\nem, QTabWidget\n\na, QFrame, QSplitter, QSizePolicy, QSp\n\nimport json\n\nimport os\n\nimport re\n\nimport threading\n\nimport time\n\nfrom subprocess import run\n\nfrom buddies. personal_assistant import PersonalAssistantBuddy\nfrom focus_control_ui import FocusControlWidget\n\nOUTPUT_FILE = \u201coutput/prediction_output. json\"\nREFRESH_INTERVAL = 3000\n\nCOLORS = {\n\u2018primary': '#2196F3',\n\"secondary': '#FF9800',\n\"success': '#4CAF50',\n\u2018warning': '#FFC107',\n\u2018error': '#F44336',\n\"dark_bg': '#2C3E50',\n\u2018light_bg': '#ECFOF1',\n\"text_primary': '#2C3E50',\n\"text_secondary': '#7F8C8D',\n\u2018border': '#BDC3C7'\n\nclass ChatbotThread(QThread) :\n\"\"\"Thread for chatbot monitoring\"\n\nProblems @ Output DebugConsole Terminal Ports\n\nModuleNotFoundError: No module named 'PyQt5'\n@ (.venv) jayantkapoor@Jayants-MacBook-Pro AI-Buddy % pip install PyQt5\nCollecting PyQt5\nUsing cached PyQt5-5.15.11-cp38-abi3-macosx_11_@_arm64.whl.metadata (2.1 kB)\nCollecting PyQt5-sip<13,>=12.15 (from PyQt5)\n\nUsing cached PyQt5_sip-12.17.@\u2014cp312-cp312-macosx_10_9_universal2.whl.metadata (472 bytes)\n\nCollecting PyQt5-Qt5<5.16.0,>=5.15.2 (from PyQt5)\n\nUsing cached PyQt5_Qt5-5.15.17-py3\u2014none-macosx_11_0_arm64.whl.metadata (536 bytes)\nUsing cached PyQt5-5.15.11-cp38-abi3-macosx_11_@_arm64.whl (6.6 MB)\nUsing cached PyQt5_Qt5-5.15.17-py3\u2014none-macosx_11_0_arm64.whl (37.1 MB)\nUsing cached PyQt5_sip-12.17.@\u2014cp312-cp312-macosx_10_9_universal2.whl (124 kB)\nInstalling collected packages: PyQt5-Qt5, PyQt5-sip, PyQt5\nSuccessfully installed PyQt5-5.15.11 PyQt5-Qt5-5.15.17 PyQt5-sip-12.17.0\n\n\u00ae (.venv) jayantkapoor@Jayants-MacBook-Pro AI-Buddy % /Users/jayantkapoor/Desktop/AI-Buddy/.venv/bin/python /Users/jayantkapoor\n\n/Desktop/AI-Buddy/pa_buddy_ui. py\nTraceback (most recent call last):\nFile \"/Users/jayantkapoor/Desktop/AI-Buddy/pa_buddy_ui.py\", line 2, in <module>\nfrom PyQt5.QtWidgets import (\nModuleNotFoundError: No module named 'PyQt5'\nO (.venv) jayantkapoor@Jayants-MacBook-Pro AI-Buddy % fj\n\n3K to generate a command\n\nQTextEdit, QMessageBox,\n\ntrying to run python directly instead of using the virtual environment's Python\ninterpreter. Let me fix this:\n\nRead activity_analyzer.py\n\n| found the issue! The problem is on line 241 where it's trying to run python ga\ntheruserdata.py but it should use sys.executable to use the current Python\ninterpreter. Let me fix this:\n\n\u00ae activity_analyzer.py +1-1 V\n\ngather_proc = subprocess.Popen([\n\nNow let me also check if there are any other similar issues in the file:\nGrepped subprocess\\.Popen.*python (*.py)\n\nGood! Now let's try running the personal assistant UI again:\n\npython pa_buddy_ui.py\n\n(.venv) jayantkapoor@Jayants\u2014-MacBook-Pro AI-Buddy % python pa_budc\nzsh: command not found: python\n(.venv) jayantkapoor@Jayants\u2014MacBook-Pro AI-Buddy %\n\n| see the issue - we're in a different virtual environment now. Let me activate\nthe correct virtual environment and run the application:\n\n&=) source venv/bin/activate && python pa_buddy_ui.py\n\n\u00a9 (.venv) jayantkapoor@Jayants-MacBook-Pro AI-Buddy % source venv/bin\n@ Error reading activity data: [Errno 2] No such file or directory\n@ Focus Automation monitoring started!\n@ Error reading activity data: [Errno 2] No such file or directory\nqt.qpa. fonts: Populating font family aliases took 79 ms. Replace us\none that exists to avoid this cost.\n\nA x @ Chatbot Buddy is now active and monitoring your work sessions!\n@ I'll check in on you and keep you company during long work sessi\nhon: @ Chatbot Buddy integrated with Personal Assistant!\nPython: ac... Error reading activity data: [Errno 2] No such file or directory\nPython: pa... @ Error reading activity data: [Errno 2] No such file or directory\nMove to background @@ Skip\n> Running terminal command... Stop\n\nAdd Context\n\nco Agent #I ~ Auto\n\n=O\n\nCursor Tab Ln1,Col1 Spaces:4 UTF-8 LF {\u00a7 Python 3.12.10 (\u2018venv':venv) [8"
}